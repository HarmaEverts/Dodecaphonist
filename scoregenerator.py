import os
import random
from enum import Enum

class Variations(Enum):
    SERIES = 0
    INVERSE = 1
    RETROGRADE = 2
    RETROGRADEINVERSE = 3


class ScoreGenerator():
    def __init__(self, dodec):
        self._dodec = dodec
        self._composition = ""
        self._score = ""


    def generate_standard(self):
        print("Generating standard series")
        return ""

    def generate_inverse(self):
        print("Generating inverser series")
        return ""

    def generate_retrograde(self):
        print("Generating retrograde series")
        return ""

    def generate_retrogradeinverse(self):
        print("Generating retrograde inverse")
        return ""

    def generate_composition(self):
        print("generating composition")
        # For each voice, generate the number of repeats for the series.
        for voice in self._dodec.voices:
            for i in range(self._dodec.repeats):
                # Generate the repeat based on the series and the provided characteristics
                # First, determine the variation of this repeat
                variation = random.randint(0, 3)
                if variation == Variations.SERIES:
                    self._composition.append(self.generate_standard())
                elif variation == Variations.INVERSE:
                    self._composition.append(self.generate_inverse())
                elif variation == Variations.RETROGRADE:
                    self._composition.append(self.generate_retrograde())
                else:  # RETROGRADEINVERSE
                    self._composition.append(self.generate_retrogradeinverse())


    def generate_score(self):
        """ Generate a composition based on the settings provided. """
        self._score += "\\version \"2.10.33\"\n"
        self._score += "\\header\n{\n"
        self._score += "title = \""
        self._score += self._dodec.title
        self._score += "\"\n"
        self._score += "composer = \"Randomly generated by Dodecaphonist\"\n}\n"
        self._score += "\\score {\n{ \n<<\n"
        self._score += "\\new StaffGroup\n\\relative <<\n"
        self._score += self._composition
        self._score += "\n\n>>\n\n>>\n }\n\\midi { } \n\\layout { }\n}\n"

    def save_lilypond_file(self):
        self._dodec.filename += '.ly'
        path = os.path.join(self._dodec.foldername, self._dodec.filename)
        with open(path, 'w') as f:
            f.write(self._score)

    def save_pdf_file(self):
        print("Saving PDF file")
        os.system('cd ' + self._dodec.foldername)
        os.system('lilypond' + self._dodec.filename)

    def save_midi_file(self):
        print("Saving midi file")
