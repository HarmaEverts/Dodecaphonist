import scoregenerator
import os


class LilypondGenerator:
    def __init__(self, composition, tempo, time_enumerator, time_denominator, foldername, path, title):
        self._composition = composition
        self._tempo = tempo
        self._time_enumerator = time_enumerator
        self._time_denominator = time_denominator
        self._foldername = foldername
        self._path = path
        self._title = title
        self._score = []

    def create_voice_preamble(self, voice):
        preamble = ""
        if voice in range(1, 4):  # G clef
            preamble += "\n\\new Staff = \""
            if voice == 1:
                preamble += "Soprano\" "
                preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
                preamble += "{ \\fixed g' { \n\\tempo 4 = "
            elif voice == 2:
                preamble += "Mezzo-soprano\" "
                preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
                preamble += "{ \\fixed e' { \n\\tempo 4 = "
            elif voice == 3:
                preamble += "Alto\" "
                preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
                preamble += "{ \\fixed c' { \n\\tempo 4 = "
            tempo = str(self._tempo)
            preamble += tempo
            preamble += "\n\\set midiInstrument = #\"flute\"\n\\clef \"treble\" \n\\key c \\major\n\\time "
            preamble += str(self._time_enumerator)
            preamble += "/"
            preamble += str(self._time_denominator)
            preamble += "\n"
        elif voice == 4:  # G clef octave down
            preamble += "\n\\new Staff = \"Tenor\""
            preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
            preamble += "{ \\fixed g { \n\\tempo 4 = "
            preamble += str(self._tempo)
            preamble += "\n\\set midiInstrument = #\"clarinet\"\n\\clef \"treble_8\" \n\\key c \\major\n\\time "
            preamble += str(self._time_enumerator)
            preamble += "/"
            preamble += str(self._time_denominator)
            preamble += "\n"
        elif voice in range(5, 7):  # F clef
            preamble += "\n\\new Staff = \""
            if voice == 5:
                preamble += "Baritone\""
                preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
                preamble += "{ \\fixed e { \n\\tempo 4 = "
            elif voice == 6:
                preamble += "Bass\""
                preamble += "<<\n\\new Voice = \"vocal\" \\with {\n\\remove \"Forbid_line_break_engraver\"\n}\n"
                preamble += "{ \\fixed c { \n\\tempo 4 = "
            preamble += str(self._tempo)
            preamble += "\n\\set midiInstrument = #\"piano\"\n\\clef \"bass\" \n\\key c \\major\n\\time "
            preamble += str(self._time_enumerator)
            preamble += "/"
            preamble += str(self._time_denominator)
            preamble += "\n"
        return preamble

    def generate_score(self):
        """ Generate a composition based on the settings provided. """
        self._score += "\\version \"2.20.0\"\n"
        self._score += "\\header\n{\n"
        self._score += "title = \""
        self._score += self._title
        self._score += "\"\n"
        self._score += "composer = \"Randomly generated by Dodecaphonist\"\n}\n"
        self._score += "\\score {\n{ \n<<\n"
        self._score += "\\new StaffGroup\n\\relative <<\n"
        voices = self._composition.get_voices()
        for voice in voices:
            self._score += self.create_voice_preamble(voice)
            self._score += voice.get_melody()
            self._score += "\n} \n}\n>>\n\n"
        self._score += "\n>>\n >>}\n\\midi\n{\n}\n\\layout\n{ \n}\n}\n"

    def save_lilypond_file(self):

        with open(os.join(self._path, '.ly'), 'w') as f:
            f.write(self._score)

    def save_other_formats(self):
        os.system('lilypond -o ' + self._dodec.foldername + ' ' + self._path)

    def generate_files(self):
        self.generate_score()
        # self.save_lilypond_file()
        # self.save_other_formats()


